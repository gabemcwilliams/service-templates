load_module modules/ngx_stream_module.so;  # Ensure Stream module is loaded

worker_processes auto;

events {
    worker_connections 1024;
}


stream {
    # -----------------------------------------------------------------------------
    # PostgreSQL Proxy (TCP) - Stream Block
    # -----------------------------------------------------------------------------
    # This block handles the TCP proxying for PostgreSQL on port 6432.
    # It listens on the non-standard port 6432 and proxies traffic to PostgreSQL on port 5432.
    server {
        listen 6432;  # Non-standard external port for PostgreSQL
        proxy_pass 127.0.0.1:5432;  # Redirect to PostgreSQL
        proxy_timeout 300s;
        proxy_connect_timeout 10s;

        ssl_preread on;  # Enable SSL handshake inspection for PostgreSQL
    }

}



http {
    # -----------------------------------------------------------------------------
    # Logging Configuration
    # -----------------------------------------------------------------------------
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';  # Define log format

    access_log /var/log/nginx/access.log main;  # Path to access logs
    error_log /var/log/nginx/error.log warn;   # Path to error logs

    include       mime.types;  # Include MIME types
    default_type  application/octet-stream;

    sendfile        on;  # Enable sendfile for efficient file transfers
    keepalive_timeout 65;  # Keep connections open for 65 seconds

    # -----------------------------------------------------------------------------
    # SSL Settings - Wildcard Cert for *.example.internal
    # -----------------------------------------------------------------------------
    ssl_certificate /etc/nginx/certs/public.crt;
    ssl_certificate_key /etc/nginx/certs/private.key;
    ssl_trusted_certificate /etc/nginx/certs/ca.crt;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # -----------------------------------------------------------------------------
    # Redirect HTTP to HTTPS
    # -----------------------------------------------------------------------------
    # This section handles redirecting all HTTP traffic to HTTPS.
    server {
        listen 80;
        server_name example.internal *.example.internal;
        return 301 https://$host$request_uri;
    }

    # -----------------------------------------------------------------------------
    # Main HTTPS Server Block
    # -----------------------------------------------------------------------------
    server {
        listen 443 ssl;
        server_name example.internal;

        ssl_certificate /etc/nginx/certs/public.crt;
        ssl_certificate_key /etc/nginx/certs/private.key;

        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
    }

    # -----------------------------------------------------------------------------
    # MinIO (Object Storage)
    # -----------------------------------------------------------------------------
    # SSL termination and proxying for MinIO Object Storage and Console.
    server {
        listen 443 ssl http2;
        server_name minio.example.internal;

        ssl_certificate /etc/nginx/certs/public.crt;
        ssl_certificate_key /etc/nginx/certs/private.key;

        # API Proxy to MinIO
        location / {
            proxy_pass https://127.0.0.1:9000;
            proxy_ssl_verify off;  # Disable SSL verification since it's local
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # MinIO Console with WebSocket support
        location /minio/ {
            proxy_pass https://127.0.0.1:9001/;
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_redirect off;
            sub_filter 'href="/' 'href="/minio/';
            sub_filter 'src="/' 'src="/minio/';
            sub_filter_once off;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        # MinIO Static Files
        location /minio/static/ {
            proxy_pass https://127.0.0.1:9001/static/;
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Override MinIOâ€™s Content Security Policy (CSP) headers
        add_header Content-Security-Policy "default-src * data: blob: 'unsafe-inline' 'unsafe-eval'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://unpkg.com; connect-src *;";
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Range";
        add_header X-Frame-Options SAMEORIGIN;
    }

    # -----------------------------------------------------------------------------
    # PgAdmin (PostgreSQL DB Admin)
    # -----------------------------------------------------------------------------
    # This section proxies requests to the PgAdmin service for PostgreSQL management.
    server {
        listen 443 ssl;
        listen [::]:443 ssl http2;
        server_name pgadmin.example.internal;

        location / {
            proxy_pass http://pgadmin.internal:4100;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # -----------------------------------------------------------------------------
    # Vault (Secrets Management)
    # -----------------------------------------------------------------------------
    # SSL termination and proxying to Vault for secrets management.
    server {
        listen 443 ssl;
        listen [::]:443 ssl http2;
        server_name vault.example.internal;

        location / {
            proxy_pass https://vault.internal:8200;
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # -----------------------------------------------------------------------------
    # Portainer (Container Management UI)
    # -----------------------------------------------------------------------------
    # This block proxies traffic to Portainer's container management interface.
    upstream portainer_backend {
        server 127.0.0.1:9443;  # Using HTTPS for secure communication
    }

    server {
        listen 443 ssl;
        server_name portainer.example.internal;

        ssl_certificate /etc/nginx/certs/public.crt;
        ssl_certificate_key /etc/nginx/certs/private.key;
        ssl_trusted_certificate /etc/nginx/certs/ca.crt;

        location / {
            proxy_pass https://portainer_backend;
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/websocket/ {
            proxy_pass https://portainer_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }
    }


    # -----------------------------------------------------------------------------
    # Chirpstack (Chirpstack IoT LoRa Dashboard)
    # -----------------------------------------------------------------------------
    # This section proxies requests to Chirpstack Bridge Gateway.
    server {
        listen 443 ssl;
        listen [::]:443 ssl http2;
        server_name chirpstack.example.internal;

        location / {
            proxy_pass http://chirpstack.internal:9382;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }


    # -----------------------------------------------------------------------------
    # Grafana (Metrics Dashboard)
    # -----------------------------------------------------------------------------
    # This section proxies requests to Grafana for metrics visualization.
    server {
        listen 443 ssl;
        listen [::]:443 ssl http2;
        server_name grafana.example.internal;

        location / {
            proxy_pass http://grafana.internal:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }


    # -----------------------------------------------------------------------------
    # Prometheus (Monitoring Dashboard)
    # -----------------------------------------------------------------------------
    # This section proxies requests to Prometheus for metrics visualization.
    server {
        listen 443 ssl;
        listen [::]:443 ssl http2;
        server_name prometheus.example.internal;

        location / {
            proxy_pass http://prometheus.internal:9030;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # -----------------------------------------------------------------------------
    # MLflow (Machine Learning Tracking)
    # -----------------------------------------------------------------------------
    # This section proxies requests to MLflow for experiment tracking.
    server {
        listen 443 ssl;
        listen [::]:443 ssl http2;
        server_name mlflow.example.internal;

        location / {
            proxy_pass http://mlflow.internal:5001;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # -----------------------------------------------------------------------------
    # Kafka Broker - SSL Termination via Nginx
    # -----------------------------------------------------------------------------
    # Nginx handles the SSL termination and proxies traffic to Kafka broker using plaintext
    server {
        listen 443 ssl;
        listen [::]:443 ssl http2;
        server_name kafka.example.internal;

        # SSL certificates for securing the connection
        ssl_certificate /etc/nginx/certs/public.crt;
        ssl_certificate_key /etc/nginx/certs/private.key;
        ssl_trusted_certificate /etc/nginx/certs/ca.crt;

        location / {
            # Proxy to Kafka's plaintext (HTTP) listener inside the host/container
            proxy_pass http://kafka.internal:9092;  # Adjust to the internal Kafka listener (plaintext)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
        }
    }

    # -----------------------------------------------------------------------------
    # Kafka-UI - SSL Termination via Nginx
    # -----------------------------------------------------------------------------
    # Nginx handles the SSL termination and proxies traffic to Kafka-UI using plaintext
    server {
        listen 443 ssl;
        listen [::]:443 ssl http2;
        server_name kafka-ui.example.internal;

        # SSL certificates for securing the connection
        ssl_certificate /etc/nginx/certs/public.crt;
        ssl_certificate_key /etc/nginx/certs/private.key;
        ssl_trusted_certificate /etc/nginx/certs/ca.crt;

        location / {
            # Proxy to Kafka-UI's HTTP listener inside the container
            proxy_pass http://kafka-ui.internal:8080;  # Adjust this to point to the Kafka-UI service inside the container
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
        }
    }


    # -----------------------------------------------------------------------------
    # Redis-UI - SSL Termination via Nginx
    # -----------------------------------------------------------------------------
    # Nginx handles SSL termination for Redis-UI and proxies traffic to the Redis-UI service.
    server {
        listen 443 ssl;
        listen [::]:443 ssl http2;
        server_name redisinsight.example.internal;

        ssl_certificate /etc/nginx/certs/public.crt;
        ssl_certificate_key /etc/nginx/certs/private.key;
        ssl_trusted_certificate /etc/nginx/certs/ca.crt;

        location / {
            proxy_pass http://redisinsight.internal:5540;  # Adjust this to point to Redis-UI service inside the container
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
        }
    }


    # -----------------------------------------------------------------------------
    # Prefect.io (Workflow Orchestration)
    # -----------------------------------------------------------------------------
    # This section handles HTTP redirect to HTTPS for Prefect.
    # It proxies requests to the Prefect web interface and API on HTTPS.

    # HTTP redirect to HTTPS
    server {
        listen 80;
        server_name prefect.example.internal;
        return 301 https://$host$request_uri;  # Redirect all HTTP to HTTPS
    }

    # HTTPS Server Block for Prefect
    server {
        listen 443 ssl;
        server_name prefect.example.internal;

        # SSL certificates for securing the connection
        ssl_certificate /etc/nginx/certs/public.crt;
        ssl_certificate_key /etc/nginx/certs/private.key;
        ssl_trusted_certificate /etc/nginx/certs/ca.crt;

        # Main Prefect web interface
        location / {
            proxy_pass http://prefect.internal:4200;  # Pointing to the Prefect web interface
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Prefect API
        location /api/ {
            proxy_pass http://prefect.internal:4200;  # Pointing to the Prefect API
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # -----------------------------------------------------------------------------
    # Docker Registry (Image Repo)
    # -----------------------------------------------------------------------------
    # This section handles HTTP redirect to HTTPS for Docker Registry.
    # It proxies requests to the Docker Registry web interface and API on HTTPS.
    # HTTP to HTTPS redirect (for users hitting port 80)

    server {
        listen 80;
        server_name registry.example.internal;
        return 301 https://$host$request_uri;  # Redirect all HTTP traffic to HTTPS
    }

    upstream registry {
        server registry.example.internal:5000;  # Pointing to the registry container
    }

    server {
        listen 443 ssl;
        server_name registry.example.internal;

        # SSL certificates for securing the connection
        ssl_certificate /etc/nginx/certs/public.crt;
        ssl_certificate_key /etc/nginx/certs/private.key;
        ssl_trusted_certificate /etc/nginx/certs/ca.crt;

        # Proxy settings for all requests
        location / {
            proxy_pass http://registry.example.internal:5000;  # Forward requests to the registry container on port 5000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy for registry specific calls, especially required by Docker to trust the registry
        location /v2/ {
            proxy_pass http://registry;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Enable certificate validation for Docker client to trust the registry
            proxy_ssl_verify on;
            proxy_ssl_trusted_certificate /etc/nginx/certs/domain.crt;
            proxy_ssl_session_reuse off;
        }
    }
}









